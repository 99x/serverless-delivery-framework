{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "IamPolicyLambdaExecution": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "dev-aws-nodejs-lambda",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:us-east-1:*:*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "IamRoleLambdaExecution"
          }
        ]
      }
    },
    "HomeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "1475234451079-2016-09-30T11:20:51.079Z/aws-nodejs.zip"
        },
        "FunctionName": "aws-nodejs-dev-home",
        "Handler": "homeHandler.home",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6
      }
    },
    "DeliveryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "1475234451079-2016-09-30T11:20:51.079Z/aws-nodejs.zip"
        },
        "FunctionName": "aws-nodejs-dev-delivery",
        "Handler": "user/userHandler.user",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-aws-nodejs"
      }
    },
    "ApiGatewayResourceHome": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "home",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersGetusers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "getUsers",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersCreateuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "createUser",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersGetuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "getUser",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHomeGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "MethodResponses": [
          {
            "ResponseModels": {},
            "ResponseParameters": {
              "method.response.header.Content-Type": "method.response.header.'text/html'"
            },
            "StatusCode": 200
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 401
          },
          {
            "StatusCode": 403
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 422
          },
          {
            "StatusCode": 500
          },
          {
            "StatusCode": 502
          },
          {
            "StatusCode": 504
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HomeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "RequestTemplates": {
            "application/json": "\n            #define( $loop )\n              {\n              #foreach($key in $map.keySet())\n                  \"$util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\n                    #if( $foreach.hasNext ) , #end\n              #end\n              }\n            #end\n\n            {\n              \"body\": $input.json(\"$\"),\n              \"method\": \"$context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\",\n              \"stage\": \"$context.stage\",\n\n              #set( $map = $input.params().header )\n              \"headers\": $loop,\n\n              #set( $map = $input.params().querystring )\n              \"query\": $loop,\n\n              #set( $map = $input.params().path )\n              \"path\": $loop,\n\n              #set( $map = $context.identity )\n              \"identity\": $loop,\n\n              #set( $map = $stageVariables )\n              \"stageVariables\": $loop\n            }\n          ",
            "application/x-www-form-urlencoded": "\n            #define( $body )\n              {\n              #foreach( $token in $input.path('$').split('&') )\n                #set( $keyVal = $token.split('=') )\n                #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0]) )\n                  #if( $keyValSize >= 2 )\n                    #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n                    #set( $val = '' )\n                  #end\n                  \"$key\": \"$val\"#if($foreach.hasNext),#end\n                #end\n              #end\n              }\n            #end\n\n            #define( $loop )\n              {\n              #foreach($key in $map.keySet())\n                  \"$util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\n                    #if( $foreach.hasNext ) , #end\n              #end\n              }\n            #end\n\n            {\n              \"body\": $body,\n              \"method\": \"$context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\",\n              \"stage\": \"$context.stage\",\n\n              #set( $map = $input.params().header )\n              \"headers\": $loop,\n\n              #set( $map = $input.params().querystring )\n              \"query\": $loop,\n\n              #set( $map = $input.params().path )\n              \"path\": $loop,\n\n              #set( $map = $context.identity )\n              \"identity\": $loop,\n\n              #set( $map = $stageVariables )\n              \"stageVariables\": $loop\n            }\n          "
          },
          "PassthroughBehavior": "NEVER",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 400,
              "SelectionPattern": ".*\\[400\\].*"
            },
            {
              "StatusCode": 401,
              "SelectionPattern": ".*\\[401\\].*"
            },
            {
              "StatusCode": 403,
              "SelectionPattern": ".*\\[403\\].*"
            },
            {
              "StatusCode": 404,
              "SelectionPattern": ".*\\[404\\].*"
            },
            {
              "StatusCode": 422,
              "SelectionPattern": ".*\\[422\\].*"
            },
            {
              "StatusCode": 500,
              "SelectionPattern": ".*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\]).*"
            },
            {
              "StatusCode": 502,
              "SelectionPattern": ".*\\[502\\].*"
            },
            {
              "StatusCode": 504,
              "SelectionPattern": ".*\\[504\\].*"
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceHome"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersGetusersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "MethodResponses": [
          {
            "ResponseModels": {},
            "ResponseParameters": {},
            "StatusCode": 200
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 401
          },
          {
            "StatusCode": 403
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 422
          },
          {
            "StatusCode": 500
          },
          {
            "StatusCode": 502
          },
          {
            "StatusCode": 504
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeliveryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "RequestTemplates": {
            "application/json": "{\n  \"body\": $input.json('$'),\n  \"path\": \"$context.resourcePath\",\n  \"stage\": \"$context.stage\",\n  \"method\": \"$context.httpMethod\",\n  \"headers\": \"{#foreach($header in $input.params().header.keySet())\\\"$header\\\": \\\"$util.escapeJavaScript($input.params().header.get($header))\\\" #if($foreach.hasNext),#end#end}\",\n  \"params\": \"{#foreach($param in $input.params().path.keySet())\\\"$param\\\": \\\"$util.escapeJavaScript($input.params().path.get($param))\\\" #if($foreach.hasNext),#end#end}\",\n  \"query\": \"{#foreach($queryParam in $input.params().querystring.keySet())\\\"$queryParam\\\": \\\"$util.escapeJavaScript($input.params().querystring.get($queryParam))\\\" #if($foreach.hasNext),#end#end}\",\n  \"current\": \"$util.urlEncode($util.base64Decode($context.authorizer.principalId))\"\n}\n",
            "application/x-www-form-urlencoded": "\n            #define( $body )\n              {\n              #foreach( $token in $input.path('$').split('&') )\n                #set( $keyVal = $token.split('=') )\n                #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0]) )\n                  #if( $keyValSize >= 2 )\n                    #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n                    #set( $val = '' )\n                  #end\n                  \"$key\": \"$val\"#if($foreach.hasNext),#end\n                #end\n              #end\n              }\n            #end\n\n            #define( $loop )\n              {\n              #foreach($key in $map.keySet())\n                  \"$util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\n                    #if( $foreach.hasNext ) , #end\n              #end\n              }\n            #end\n\n            {\n              \"body\": $body,\n              \"method\": \"$context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\",\n              \"stage\": \"$context.stage\",\n\n              #set( $map = $input.params().header )\n              \"headers\": $loop,\n\n              #set( $map = $input.params().querystring )\n              \"query\": $loop,\n\n              #set( $map = $input.params().path )\n              \"path\": $loop,\n\n              #set( $map = $context.identity )\n              \"identity\": $loop,\n\n              #set( $map = $stageVariables )\n              \"stageVariables\": $loop\n            }\n          "
          },
          "PassthroughBehavior": "NEVER",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": ".*\\[400\\].*"
            },
            {
              "StatusCode": 401,
              "SelectionPattern": ".*\\[401\\].*"
            },
            {
              "StatusCode": 403,
              "SelectionPattern": ".*\\[403\\].*"
            },
            {
              "StatusCode": 404,
              "SelectionPattern": ".*\\[404\\].*"
            },
            {
              "StatusCode": 422,
              "SelectionPattern": ".*\\[422\\].*"
            },
            {
              "StatusCode": 500,
              "SelectionPattern": ".*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\]).*"
            },
            {
              "StatusCode": 502,
              "SelectionPattern": ".*\\[502\\].*"
            },
            {
              "StatusCode": 504,
              "SelectionPattern": ".*\\[504\\].*"
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersGetusers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersCreateuserPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "MethodResponses": [
          {
            "ResponseModels": {},
            "ResponseParameters": {},
            "StatusCode": 200
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 401
          },
          {
            "StatusCode": 403
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 422
          },
          {
            "StatusCode": 500
          },
          {
            "StatusCode": 502
          },
          {
            "StatusCode": 504
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeliveryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "RequestTemplates": {
            "application/json": "{\n  \"body\": $input.json('$'),\n  \"path\": \"$context.resourcePath\",\n  \"stage\": \"$context.stage\",\n  \"method\": \"$context.httpMethod\",\n  \"headers\": \"{#foreach($header in $input.params().header.keySet())\\\"$header\\\": \\\"$util.escapeJavaScript($input.params().header.get($header))\\\" #if($foreach.hasNext),#end#end}\",\n  \"params\": \"{#foreach($param in $input.params().path.keySet())\\\"$param\\\": \\\"$util.escapeJavaScript($input.params().path.get($param))\\\" #if($foreach.hasNext),#end#end}\",\n  \"query\": \"{#foreach($queryParam in $input.params().querystring.keySet())\\\"$queryParam\\\": \\\"$util.escapeJavaScript($input.params().querystring.get($queryParam))\\\" #if($foreach.hasNext),#end#end}\",\n  \"current\": \"$util.urlEncode($util.base64Decode($context.authorizer.principalId))\"\n}\n",
            "application/x-www-form-urlencoded": "\n            #define( $body )\n              {\n              #foreach( $token in $input.path('$').split('&') )\n                #set( $keyVal = $token.split('=') )\n                #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0]) )\n                  #if( $keyValSize >= 2 )\n                    #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n                    #set( $val = '' )\n                  #end\n                  \"$key\": \"$val\"#if($foreach.hasNext),#end\n                #end\n              #end\n              }\n            #end\n\n            #define( $loop )\n              {\n              #foreach($key in $map.keySet())\n                  \"$util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\n                    #if( $foreach.hasNext ) , #end\n              #end\n              }\n            #end\n\n            {\n              \"body\": $body,\n              \"method\": \"$context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\",\n              \"stage\": \"$context.stage\",\n\n              #set( $map = $input.params().header )\n              \"headers\": $loop,\n\n              #set( $map = $input.params().querystring )\n              \"query\": $loop,\n\n              #set( $map = $input.params().path )\n              \"path\": $loop,\n\n              #set( $map = $context.identity )\n              \"identity\": $loop,\n\n              #set( $map = $stageVariables )\n              \"stageVariables\": $loop\n            }\n          "
          },
          "PassthroughBehavior": "NEVER",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": ".*\\[400\\].*"
            },
            {
              "StatusCode": 401,
              "SelectionPattern": ".*\\[401\\].*"
            },
            {
              "StatusCode": 403,
              "SelectionPattern": ".*\\[403\\].*"
            },
            {
              "StatusCode": 404,
              "SelectionPattern": ".*\\[404\\].*"
            },
            {
              "StatusCode": 422,
              "SelectionPattern": ".*\\[422\\].*"
            },
            {
              "StatusCode": 500,
              "SelectionPattern": ".*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\]).*"
            },
            {
              "StatusCode": 502,
              "SelectionPattern": ".*\\[502\\].*"
            },
            {
              "StatusCode": 504,
              "SelectionPattern": ".*\\[504\\].*"
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersCreateuser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersGetuserPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "MethodResponses": [
          {
            "ResponseModels": {},
            "ResponseParameters": {},
            "StatusCode": 200
          },
          {
            "StatusCode": 400
          },
          {
            "StatusCode": 401
          },
          {
            "StatusCode": 403
          },
          {
            "StatusCode": 404
          },
          {
            "StatusCode": 422
          },
          {
            "StatusCode": 500
          },
          {
            "StatusCode": 502
          },
          {
            "StatusCode": 504
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeliveryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "RequestTemplates": {
            "application/json": "{\n  \"body\": $input.json('$'),\n  \"path\": \"$context.resourcePath\",\n  \"stage\": \"$context.stage\",\n  \"method\": \"$context.httpMethod\",\n  \"headers\": \"{#foreach($header in $input.params().header.keySet())\\\"$header\\\": \\\"$util.escapeJavaScript($input.params().header.get($header))\\\" #if($foreach.hasNext),#end#end}\",\n  \"params\": \"{#foreach($param in $input.params().path.keySet())\\\"$param\\\": \\\"$util.escapeJavaScript($input.params().path.get($param))\\\" #if($foreach.hasNext),#end#end}\",\n  \"query\": \"{#foreach($queryParam in $input.params().querystring.keySet())\\\"$queryParam\\\": \\\"$util.escapeJavaScript($input.params().querystring.get($queryParam))\\\" #if($foreach.hasNext),#end#end}\",\n  \"current\": \"$util.urlEncode($util.base64Decode($context.authorizer.principalId))\"\n}\n",
            "application/x-www-form-urlencoded": "\n            #define( $body )\n              {\n              #foreach( $token in $input.path('$').split('&') )\n                #set( $keyVal = $token.split('=') )\n                #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0]) )\n                  #if( $keyValSize >= 2 )\n                    #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n                    #set( $val = '' )\n                  #end\n                  \"$key\": \"$val\"#if($foreach.hasNext),#end\n                #end\n              #end\n              }\n            #end\n\n            #define( $loop )\n              {\n              #foreach($key in $map.keySet())\n                  \"$util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\n                    #if( $foreach.hasNext ) , #end\n              #end\n              }\n            #end\n\n            {\n              \"body\": $body,\n              \"method\": \"$context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\",\n              \"stage\": \"$context.stage\",\n\n              #set( $map = $input.params().header )\n              \"headers\": $loop,\n\n              #set( $map = $input.params().querystring )\n              \"query\": $loop,\n\n              #set( $map = $input.params().path )\n              \"path\": $loop,\n\n              #set( $map = $context.identity )\n              \"identity\": $loop,\n\n              #set( $map = $stageVariables )\n              \"stageVariables\": $loop\n            }\n          "
          },
          "PassthroughBehavior": "NEVER",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": ".*\\[400\\].*"
            },
            {
              "StatusCode": 401,
              "SelectionPattern": ".*\\[401\\].*"
            },
            {
              "StatusCode": 403,
              "SelectionPattern": ".*\\[403\\].*"
            },
            {
              "StatusCode": 404,
              "SelectionPattern": ".*\\[404\\].*"
            },
            {
              "StatusCode": 422,
              "SelectionPattern": ".*\\[422\\].*"
            },
            {
              "StatusCode": 500,
              "SelectionPattern": ".*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\]).*"
            },
            {
              "StatusCode": 502,
              "SelectionPattern": ".*\\[502\\].*"
            },
            {
              "StatusCode": 504,
              "SelectionPattern": ".*\\[504\\].*"
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersGetuser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayDeployment1475234451094": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodHomeGet",
        "ApiGatewayMethodUsersGetusersGet",
        "ApiGatewayMethodUsersCreateuserPost",
        "ApiGatewayMethodUsersGetuserPost"
      ]
    },
    "HomeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HomeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DeliveryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeliveryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "HomeLambdaFunctionArn": {
      "Description": "Lambda function info",
      "Value": {
        "Fn::GetAtt": [
          "HomeLambdaFunction",
          "Arn"
        ]
      }
    },
    "DeliveryLambdaFunctionArn": {
      "Description": "Lambda function info",
      "Value": {
        "Fn::GetAtt": [
          "DeliveryLambdaFunction",
          "Arn"
        ]
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.us-east-1.amazonaws.com/dev"
          ]
        ]
      }
    }
  }
}